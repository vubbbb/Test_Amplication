/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Preview as PrismaPreview,
  Product as PrismaProduct,
  User as PrismaUser,
} from "@prisma/client";

export class PreviewServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PreviewCountArgs, "select">): Promise<number> {
    return this.prisma.preview.count(args);
  }

  async previews(args: Prisma.PreviewFindManyArgs): Promise<PrismaPreview[]> {
    return this.prisma.preview.findMany(args);
  }
  async preview(
    args: Prisma.PreviewFindUniqueArgs
  ): Promise<PrismaPreview | null> {
    return this.prisma.preview.findUnique(args);
  }
  async createPreview(args: Prisma.PreviewCreateArgs): Promise<PrismaPreview> {
    return this.prisma.preview.create(args);
  }
  async updatePreview(args: Prisma.PreviewUpdateArgs): Promise<PrismaPreview> {
    return this.prisma.preview.update(args);
  }
  async deletePreview(args: Prisma.PreviewDeleteArgs): Promise<PrismaPreview> {
    return this.prisma.preview.delete(args);
  }

  async getProduct(parentId: string): Promise<PrismaProduct | null> {
    return this.prisma.preview
      .findUnique({
        where: { id: parentId },
      })
      .product();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.preview
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
